count(NPPES_CREDENTIALS) %>%
arrange(desc(n))
# Take a look at the data
puf %>%
select(AVERAGE_MEDICARE_ALLOWED_AMT, BENE_DAY_SRVC_CNT, LINE_SRVC_CNT, BENE_UNIQUE_CNT, NPI) %>%
head(10)
# Calculate physician-level data
MD_data = puf %>%
select(AVERAGE_MEDICARE_ALLOWED_AMT, BENE_DAY_SRVC_CNT, LINE_SRVC_CNT, BENE_UNIQUE_CNT, NPI) %>%
group_by(NPI) %>%
summarise(
medicare_spending = sum(AVERAGE_MEDICARE_ALLOWED_AMT * BENE_DAY_SRVC_CNT),
claims = sum(BENE_DAY_SRVC_CNT),
patients = sum(BENE_UNIQUE_CNT))
# Calculate integration of physicians
MD_int = puf %>%
# Total claims by physician
select(NPI, PLACE_OF_SERVICE, BENE_DAY_SRVC_CNT) %>%
group_by(NPI) %>%
mutate(total_claims = sum(BENE_DAY_SRVC_CNT)) %>%
# Percentage of claims Facility vs Office
group_by(NPI, PLACE_OF_SERVICE) %>%
summarise(place_claims = sum(BENE_DAY_SRVC_CNT),
total_claims = last(total_claims)) %>%
mutate(per_claims = place_claims/total_claims) %>%
# Calculate integration
group_by(NPI) %>%
pivot_wider(
id_cols = NPI,
names_from = PLACE_OF_SERVICE,
values_from = c(per_claims),
values_fill = 0) %>%
mutate(integration = (F>=0.75)*1) %>%
select(NPI, integration)
MD_not_int = MD_int %>% filter(integration == 0)
MD_data = MD_data %>% filter(NPI %in% MD_not_int$NPI)
library(tidyverse)
library(fixest)
options(dplyr.summarise.inform = FALSE) ## Add to .Rprofile to make permanent
# Questions for bestie Ian
# 1. How do I get total number of claims billed to an ambulatory surgery center?
data_dir = "/Users/pablo/Dropbox/2_PhD/3rd_year/771_Health_II/Health_Econ_Assignments/Data"
name_puf_yearly = list.files(path=paste0(data_dir, "/PUF"), pattern="*.txt", recursive=TRUE)
name_mdppas_yearly = list.files(path=paste0(data_dir, "/MDPPAS"))
datalist = vector("list", length = length(name_puf_yearly))
for (y in 1:length(name_puf_yearly)){
name_puf = name_puf_yearly[y]
year = as.numeric(strsplit(name_puf, "/")[[1]][1])
print(paste0("Year: ", year))
# Read PUF for each year
puf_yearly = read_tsv(paste0(data_dir, "/PUF/", name_puf))
names(puf_yearly) = tolower(names(puf_yearly))
# For years > 2013, use only MD not integrated in 2012
if (year != 2012){
puf_yearly = puf_yearly %>% filter(npi %in% MD_not_int$npi)
}
# Restrict to MD only
if (year == 2012){
puf_yearly = puf_yearly %>%
filter(
grepl("MD", nppes_credentials) |
grepl("M.D", nppes_credentials) |
grepl("M..D", nppes_credentials))
}
# Calculate physician-level data
MD_data = puf_yearly %>%
select(average_medicare_allowed_amt, bene_day_srvc_cnt, bene_unique_cnt, npi) %>%
group_by(npi) %>%
summarise(
medicare_spending = sum(average_medicare_allowed_amt * bene_day_srvc_cnt),
claims = sum(bene_day_srvc_cnt),
patients = sum(bene_unique_cnt)) %>%
mutate(year = year)
# Calculate integration of physicians
MD_int = puf_yearly %>%
# Total claims by physician
select(npi, place_of_service, bene_day_srvc_cnt) %>%
group_by(npi) %>%
mutate(total_claims = sum(bene_day_srvc_cnt)) %>%
# Percentage of claims Facility vs Office
group_by(npi, place_of_service) %>%
summarise(place_claims = sum(bene_day_srvc_cnt),
total_claims = last(total_claims)) %>%
mutate(per_claims = place_claims/total_claims) %>%
# Calculate integration
group_by(npi) %>%
pivot_wider(
id_cols = npi,
names_from = place_of_service,
values_from = c(per_claims),
values_fill = 0) %>%
mutate(integration = (F>=0.75)*1) %>%
select(npi, integration)
if (year == 2012){
MD_int = MD_int %>% filter(integration == 0)
MD_data = MD_data %>% filter(npi %in% MD_int$npi)
}
# Merge physician claims and integration and add it to the list
datalist[[y]] = left_join(MD_data, MD_int, by="npi")
}
# Remove and append all datasets
puf <- bind_rows(datalist)
rm(datalist, MD_data, MD_int, puf_yearly, year)
# puf %>% group_by(NPI, PLACE_OF_SERVICE) %>% summarise(sum(BENE_DAY_SRVC_CNT))
puf$lclaims = log(puf$claims)
res = feols(lclaims ~ integration | npi + year, puf)
etable(res)
puf %>% group_by(year) %>% count(npi)
puf %>% group_by(year) %>% count(year)
library(tidyverse)
library(fixest)
options(dplyr.summarise.inform = FALSE) ## Add to .Rprofile to make permanent
# Questions for bestie Ian
# 1. How do I get total number of claims billed to an ambulatory surgery center?
data_dir = "/Users/pablo/Dropbox/2_PhD/3rd_year/771_Health_II/Health_Econ_Assignments/Data"
name_puf_yearly = list.files(path=paste0(data_dir, "/PUF"), pattern="*.txt", recursive=TRUE)
name_mdppas_yearly = list.files(path=paste0(data_dir, "/MDPPAS"))
datalist = vector("list", length = length(name_puf_yearly))
for (y in 1:length(name_puf_yearly)){
name_puf = name_puf_yearly[y]
year = as.numeric(strsplit(name_puf, "/")[[1]][1])
print(paste0("Year: ", year))
# Read PUF for each year
puf_yearly = read_tsv(paste0(data_dir, "/PUF/", name_puf))
names(puf_yearly) = tolower(names(puf_yearly))
# For years > 2013, use only MD not integrated in 2012
if (year != 2012){
puf_yearly = puf_yearly %>% filter(npi %in% MD_not_int$npi)
}
# Restrict to MD only
if (year == 2012){
puf_yearly = puf_yearly %>%
filter(
grepl("MD", nppes_credentials) |
grepl("M.D", nppes_credentials) |
grepl("M..D", nppes_credentials))
}
# Calculate physician-level data
MD_data = puf_yearly %>%
select(average_medicare_allowed_amt, bene_day_srvc_cnt, bene_unique_cnt, npi) %>%
group_by(npi) %>%
summarise(
medicare_spending = sum(average_medicare_allowed_amt * bene_day_srvc_cnt),
claims = sum(bene_day_srvc_cnt),
patients = sum(bene_unique_cnt)) %>%
mutate(year = year)
# Calculate integration of physicians
MD_int = puf_yearly %>%
# Total claims by physician
select(npi, place_of_service, bene_day_srvc_cnt) %>%
group_by(npi) %>%
mutate(total_claims = sum(bene_day_srvc_cnt)) %>%
# Percentage of claims Facility vs Office
group_by(npi, place_of_service) %>%
summarise(place_claims = sum(bene_day_srvc_cnt),
total_claims = last(total_claims)) %>%
mutate(per_claims = place_claims/total_claims) %>%
# Calculate integration
group_by(npi) %>%
pivot_wider(
id_cols = npi,
names_from = place_of_service,
values_from = c(per_claims),
values_fill = 0) %>%
mutate(integration = (F>=0.75)*1) %>%
select(npi, integration)
# Merge physician claims and integration and add it to the list
if (year == 2012){
MD_not_int = MD_int %>% filter(integration == 0)
MD_data = MD_data %>% filter(npi %in% MD_not_int$npi)
datalist[[y]] = left_join(MD_data, MD_not_int, by="npi")
} else {
datalist[[y]] = left_join(MD_data, MD_int, by="npi")
}
}
# Remove and append all datasets
puf <- bind_rows(datalist)
rm(datalist, MD_data, MD_int, puf_yearly, year)
# puf %>% group_by(NPI, PLACE_OF_SERVICE) %>% summarise(sum(BENE_DAY_SRVC_CNT))
puf$lclaims = log(puf$claims)
res = feols(lclaims ~ integration | npi + year, puf)
etable(res)
mdppas = read_csv(paste0(data_dir, "/MDPPAS/PhysicianData_2012.csv"))
View(mdppas)
mdppas %>% count(npi)
# Calculate integration with MDPPAS
mdppas = mdppas %>%
select(npi, pos_opd, pos_office, pos_asc) %>%
mutate(integration = (pos_opd / (pos_opd + pos_office + pos_asc)) > 0.75)
View(mdppas)
View(mdppas)
library(tidyverse)
options(dplyr.summarise.inform = FALSE) ## Add to .Rprofile to make permanent
data_dir = "/Users/pablo/Dropbox/2_PhD/3rd_year/771_Health_II/Health_Econ_Assignments/Data"
puf = read_tsv(paste0(data_dir, "/PUF/2012/Medicare_Provider_Util_Payment_PUF_CY2012.txt"))
mdppas = read_csv(paste0(data_dir, "/MDPPAS/PhysicianData_2012.csv"))
names(puf) = tolower(names(puf))
names(puf)
library(tidyverse)
options(dplyr.summarise.inform = FALSE) ## Add to .Rprofile to make permanent
data_dir = "/Users/pablo/Dropbox/2_PhD/3rd_year/771_Health_II/Health_Econ_Assignments/Data"
puf = read_tsv(paste0(data_dir, "/PUF/2012/Medicare_Provider_Util_Payment_PUF_CY2012.txt"))
mdppas = read_csv(paste0(data_dir, "/MDPPAS/PhysicianData_2012.csv"))
names(puf) = tolower(names(puf))
# Restrict to MD only
puf = puf %>%
filter(
grepl("MD", nppes_credentials) |
grepl("M.D", nppes_credentials) |
grepl("M..D", nppes_credentials))
# Check the MDs
credentials_MD = puf %>%
count(nppes_credentials) %>%
arrange(desc(n))
# Take a look at the data
puf %>%
select(average_medicare_allowed_amt, bene_day_srvc_cnt, bene_unique_cnt, npi) %>%
head(10)
# Calculate physician-level data
MD_data = puf %>%
select(average_medicare_allowed_amt, bene_day_srvc_cnt, bene_unique_cnt, npi) %>%
group_by(npi) %>%
summarise(
medicare_spending = sum(average_medicare_allowed_amt * bene_day_srvc_cnt),
claims = sum(bene_day_srvc_cnt),
patients = sum(bene_unique_cnt))
# Calculate integration of physicians
MD_int = puf %>%
# Total claims by physician
select(npi, place_of_service, bene_day_srvc_cnt) %>%
group_by(npi) %>%
mutate(total_claims = sum(bene_day_srvc_cnt)) %>%
# Percentage of claims Facility vs Office
group_by(npi, place_of_service) %>%
summarise(place_claims = sum(bene_day_srvc_cnt),
total_claims = last(total_claims)) %>%
mutate(per_claims = place_claims/total_claims) %>%
# Calculate integration
group_by(npi) %>%
pivot_wider(
id_cols = npi,
names_from = place_of_service,
values_from = c(per_claims),
values_fill = 0) %>%
mutate(integration = (F>=0.75)*1) %>%
select(npi, integration)
MD_not_int = MD_int %>% filter(integration == 0)
MD_data = MD_data %>% filter(npi %in% MD_not_int$npi)
MD_int = MD_int %>% filter(npi %in% MD_not_int$npi)
# Calculate integration with MDPPAS
mdppas = mdppas %>%
select(npi, pos_opd, pos_office, pos_asc) %>%
mutate(integration = (pos_opd / (pos_opd + pos_office + pos_asc)) > 0.75)
# Merge MDPPAS and PUF
MD_data = left_join(MD_data, mdppas, by="npi")
View(MD_data)
View(mdppas)
MD_data = left_join(MD_data, mdppas, by="npi")
mdppas$npi = as.character(mdppas$npi)
# Merge MDPPAS and PUF
MD_data = left_join(MD_data, mdppas, by="npi")
View(MD_data)
View(MD_data)
View(mdppas)
View(MD_data)
MD_data %>% filter(is.na(integration))
strsplit(name_mdppas_yearly[1], "_")
name_mdppas_yearly[c(2:9)]
name_mdppas_yearly[c(4:9)]
name_mdppas_yearly = list.files(path=paste0(data_dir, "/MDPPAS"))[c(4:9)]
library(tidyverse)
library(fixest)
options(dplyr.summarise.inform = FALSE) ## Add to .Rprofile to make permanent
# Questions for bestie Ian
# 1. How do I get total number of claims billed to an ambulatory surgery center?
data_dir = "/Users/pablo/Dropbox/2_PhD/3rd_year/771_Health_II/Health_Econ_Assignments/Data"
name_puf_yearly = list.files(path=paste0(data_dir, "/PUF"), pattern="*.txt", recursive=TRUE)
name_mdppas_yearly = list.files(path=paste0(data_dir, "/MDPPAS"))[c(4:9)]   # 2012 - 2017
datalist = vector("list", length = length(name_puf_yearly))
for (y in 1:length(name_puf_yearly)){
# Get file names and year
name_mdppas = name_mdppas_yearly[y]
name_puf = name_puf_yearly[y]
year = as.numeric(strsplit(name_puf, "/")[[1]][1])
print(paste0("*** Analyzing year: ", year))
# Read MDPPAS for every year
mdppas_yearly = read_csv(paste0(data_dir, "/MDPPAS/", name_mdppas))
# Read PUF for each year
puf_yearly = read_tsv(paste0(data_dir, "/PUF/", name_puf))
names(puf_yearly) = tolower(names(puf_yearly))
# For years > 2013, use only MD not integrated in 2012
if (year != 2012){
puf_yearly = puf_yearly %>% filter(npi %in% MD_not_int$npi)
}
# Restrict to MD only
if (year == 2012){
puf_yearly = puf_yearly %>%
filter(
grepl("MD", nppes_credentials) |
grepl("M.D", nppes_credentials) |
grepl("M..D", nppes_credentials))
}
# Calculate physician-level data
MD_data = puf_yearly %>%
select(average_medicare_allowed_amt, bene_day_srvc_cnt, bene_unique_cnt, npi) %>%
group_by(npi) %>%
summarise(
medicare_spending = sum(average_medicare_allowed_amt * bene_day_srvc_cnt),
claims = sum(bene_day_srvc_cnt),
patients = sum(bene_unique_cnt)) %>%
mutate(year = year)
# Calculate integration of physicians
MD_int = mdppas_yearly %>%
select(npi, pos_opd, pos_office, pos_asc) %>%
mutate(integration = ((pos_opd / (pos_opd + pos_office + pos_asc)) > 0.75) * 1) %>%
select(npi, integration)
MD_int$npi = as.character(MD_int$npi)
# Merge physician claims and integration and add it to the list
if (year == 2012){
MD_not_int = mdppas %>% filter(integration == 0)
MD_data = MD_data %>% filter(npi %in% MD_not_int$npi)
datalist[[y]] = left_join(MD_data, MD_not_int, by="npi")
} else {
datalist[[y]] = left_join(MD_data, MD_int, by="npi")
}
}
# Remove and append all datasets
puf <- bind_rows(datalist)
rm(datalist, MD_data, MD_int, puf_yearly, mdppas_yearly, year)
# puf %>% group_by(NPI, PLACE_OF_SERVICE) %>% summarise(sum(BENE_DAY_SRVC_CNT))
puf$lclaims = log(puf$claims)
res = feols(lclaims ~ integration | npi + year, puf)
etable(res)
library(tidyverse)
library(fixest)
options(dplyr.summarise.inform = FALSE) ## Add to .Rprofile to make permanent
# Questions for bestie Ian
# 1. How do I get total number of claims billed to an ambulatory surgery center?
data_dir = "/Users/pablo/Dropbox/2_PhD/3rd_year/771_Health_II/Health_Econ_Assignments/Data"
name_puf_yearly = list.files(path=paste0(data_dir, "/PUF"), pattern="*.txt", recursive=TRUE)
name_mdppas_yearly = list.files(path=paste0(data_dir, "/MDPPAS"))[c(4:9)]   # 2012 - 2017
datalist = vector("list", length = length(name_puf_yearly))
for (y in 1:length(name_puf_yearly)){
# Get file names and year
name_mdppas = name_mdppas_yearly[y]
name_puf = name_puf_yearly[y]
year = as.numeric(strsplit(name_puf, "/")[[1]][1])
print(paste0("*** Analyzing year: ", year))
# Read MDPPAS for every year
mdppas_yearly = read_csv(paste0(data_dir, "/MDPPAS/", name_mdppas))
# Read PUF for each year
puf_yearly = read_tsv(paste0(data_dir, "/PUF/", name_puf))
names(puf_yearly) = tolower(names(puf_yearly))
# For years > 2013, use only MD not integrated in 2012
if (year != 2012){
puf_yearly = puf_yearly %>% filter(npi %in% MD_not_int$npi)
}
# Restrict to MD only
if (year == 2012){
puf_yearly = puf_yearly %>%
filter(
grepl("MD", nppes_credentials) |
grepl("M.D", nppes_credentials) |
grepl("M..D", nppes_credentials))
}
# Calculate physician-level data
MD_data = puf_yearly %>%
select(average_medicare_allowed_amt, bene_day_srvc_cnt, bene_unique_cnt, npi) %>%
group_by(npi) %>%
summarise(
medicare_spending = sum(average_medicare_allowed_amt * bene_day_srvc_cnt),
claims = sum(bene_day_srvc_cnt),
patients = sum(bene_unique_cnt)) %>%
mutate(year = year)
# Calculate integration of physicians
MD_int = mdppas_yearly %>%
select(npi, pos_opd, pos_office, pos_asc) %>%
mutate(integration = ((pos_opd / (pos_opd + pos_office + pos_asc)) > 0.75) * 1) %>%
select(npi, integration)
MD_int$npi = as.character(MD_int$npi)
# Merge physician claims and integration and add it to the list
if (year == 2012){
MD_not_int = MD_int %>% filter(integration == 0)
MD_data = MD_data %>% filter(npi %in% MD_not_int$npi)
datalist[[y]] = left_join(MD_data, MD_not_int, by="npi")
} else {
datalist[[y]] = left_join(MD_data, MD_int, by="npi")
}
}
# Remove and append all datasets
puf <- bind_rows(datalist)
rm(datalist, MD_data, MD_int, puf_yearly, mdppas_yearly, year)
# puf %>% group_by(NPI, PLACE_OF_SERVICE) %>% summarise(sum(BENE_DAY_SRVC_CNT))
puf$lclaims = log(puf$claims)
res = feols(lclaims ~ integration | npi + year, puf)
etable(res)
View(puf)
View(puf)
puf = puf %>% filter(!is.na(integration))
res = feols(lclaims ~ integration | npi + year, puf)
etable(res)
install.packages("robomit")
o_beta("lclaims", "integration", con="npi + year", id="npi", time="year", delta=1, R2max=0.9, data=puf)
library(robomit)
delta_list = c(0, 0.5, 1, 1.5, 2)
R2max_list = c(0.5, 0.6, 0.7, 0.8, 0.9, 1)
o_beta("lclaims", "integration", con="npi + year", id="npi", time="year", delta=1, R2max=0.9, data=puf)
o_beta("lclaims", "integration", con="npi + year", id="npi", time="year",
delta=1, R2max=0.9, type="lm", data=puf)
o_beta("lclaims", "integration", con="npi + year", id="npi", time="year",
delta=1, R2max=0.5, type="lm", data=puf)
o_beta("lclaims", "integration", con="npi + year",
delta=1, R2max=0.5, type="lm", data=puf)
library(robomit)
delta_list = c(0, 0.5, 1, 1.5, 2)
R2max_list = c(0.5, 0.6, 0.7, 0.8, 0.9, 1)
o_beta("lclaims", "integration", con="npi + year", id="npi", time="year",
delta=1, R2max=0.5, type="lm", data=puf)
for (delta in delta_list){
for (R2max in R2max_list){
o_beta("lclaims", "integration", con="npi + year", id="npi", time="year",
delta=delta, R2max=R2max, type="lm", data=puf)
}
}
o_beta("lclaims", "integration", con="npi + year", id="npi", time="year",
delta=1, R2max=1, type="lm", data=puf)
o_beta("lclaims", "integration", con="year", id="npi", time="year",
delta=1, R2max=1, type="lm", data=puf)
puf_dummy = puf %>%
mutate(var = 1) %>%
spread(npi, var, fill = 0, sep = "_") %>%
left_join(puf)
library(tidyverse)
options(dplyr.summarise.inform = FALSE) ## Add to .Rprofile to make permanent
# Questions for bestie Ian
data_dir = "/Users/pablo/Dropbox/2_PhD/3rd_year/771_Health_II/Health_Econ_Assignments/Data"
name_puf_yearly = list.files(path=paste0(data_dir, "/PUF"), pattern="*.txt", recursive=TRUE)
name_mdppas_yearly = list.files(path=paste0(data_dir, "/MDPPAS"))[c(4:9)]   # 2012 - 2017
datalist = vector("list", length = length(name_puf_yearly))
for (y in 1:length(name_puf_yearly)){
# Get file names and year
name_mdppas = name_mdppas_yearly[y]
name_puf = name_puf_yearly[y]
year = strsplit(name_puf, "/")[[1]][1]
print(paste0("*** Analyzing year: ", year))
# Read MDPPAS for every year
mdppas_yearly = read_csv(paste0(data_dir, "/MDPPAS/", name_mdppas))
# Read PUF for each year
puf_yearly = read_tsv(paste0(data_dir, "/PUF/", name_puf))
names(puf_yearly) = tolower(names(puf_yearly))
# For years > 2013, use only MD not integrated in 2012
if (year != "2012"){
puf_yearly = puf_yearly %>% filter(npi %in% MD_not_int$npi)
}
# Restrict to MD only
if (year == "2012"){
puf_yearly = puf_yearly %>%
filter(
grepl("MD", nppes_credentials) |
grepl("M.D", nppes_credentials) |
grepl("M..D", nppes_credentials))
}
# Calculate physician-level data
MD_data = puf_yearly %>%
select(average_medicare_allowed_amt, bene_day_srvc_cnt, bene_unique_cnt, npi) %>%
group_by(npi) %>%
summarise(
medicare_spending = sum(average_medicare_allowed_amt * bene_day_srvc_cnt),
claims = sum(bene_day_srvc_cnt),
patients = sum(bene_unique_cnt)) %>%
mutate(year = year)
# Calculate integration of physicians
MD_int = mdppas_yearly %>%
select(npi, pos_opd, pos_office, pos_asc) %>%
mutate(integration = ((pos_opd / (pos_opd + pos_office + pos_asc)) > 0.75) * 1) %>%
select(npi, integration)
MD_int$npi = as.character(MD_int$npi)
# Merge physician claims and integration and add it to the list
if (year == "2012"){
MD_not_int = MD_int %>% filter(integration == 0)
MD_data = MD_data %>% filter(npi %in% MD_not_int$npi)
datalist[[y]] = left_join(MD_data, MD_not_int, by="npi")
} else {
datalist[[y]] = left_join(MD_data, MD_int, by="npi")
}
}
# Append all datasets, remove missing values, and remove other stuff
puf <- bind_rows(datalist)
puf = puf %>% filter(!is.na(integration))
rm(datalist, MD_data, MD_int, puf_yearly, mdppas_yearly, year)
# OLS: log(claims) ~ integration
library(fixest)
puf$lclaims = log(puf$claims)
res = feols(lclaims ~ integration | npi + year, puf)
etable(res)
# Robustness Checks for Omitted Variable Bias
library(robomit)
delta_list = c(0, 0.5, 1, 1.5, 2)
R2max_list = c(0.5, 0.6, 0.7, 0.8, 0.9, 1)
# puf_dummy = puf %>%
#   mutate(var = 1) %>%
#   spread(npi, var, fill = 0, sep = "_") %>%
#   left_join(puf)
o_beta("lclaims", "integration", con="year", id="npi", time="year",
delta=1, R2max=1, type="lm", data=puf)
o_beta("lclaims", "integration", con="npi + year", id="npi", time="year",
delta=1, R2max=1, type="lm", data=puf)
name_mdppas_yearly
taxid_base = read_csv(paste0(data_dir, "/MDPPAS/PhysicianData_2009.csv"))
taxid_base = read_csv(paste0(data_dir, "/MDPPAS/PhysicianData_2009.csv")) %>%
select(npi, group1)
pfs = read_tsv(paste0(data_dir, "/PFS_update_data.txt"))
